services:

  cms_backend:
    build: ./services/cms/backend
    container_name: CMSBackend
    ports:
      - "${CMS_BACKEND_PORT}:3000"
    depends_on:
      - mongo
      - redis
      - notification
    env_file: .env
    environment:
      PORT: 3000
      MONGO_URI: "mongodb://mongo:27017/hr_db"
      MONGO_DB: "hr_db"
      MONGO_INITDB_DATABASE: "hr_db"
      REDIS_URI: "redis://redis:6379"
      NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
      FRONTEND_BASE_URL: "http://localhost:${CMS_FRONTEND_PORT}"
    networks:
      - app_network
    
  cms_frontend:
    build: ./services/cms/frontend
    container_name: CMSFrontend
    ports:
      - "${CMS_FRONTEND_PORT}:3000"
    depends_on:
      - cms_backend
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: "http://localhost:${CMS_BACKEND_PORT}"
    networks:
      - app_network
    volumes:
      - shared_volume:/shared_volume  # Added shared volume

    
  interview_backend:
    build: ./services/interview_ai/backend
    container_name: InterviewBackend
    ports:
      - "${INTERVIEW_BACKEND_PORT}:8080"
    depends_on:
      - mongo
      - redis
      - notification
    env_file: .env
    environment:
      MONGO_URI: "mongodb://mongo:27017/hr_db"
      MONGO_DB: "hr_db"
      REDIS_URI: "redis://redis:6379"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      MODEL: "${MODEL}"
      NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
      FRONTEND_BASE_URL: "http://localhost:${INTERVIEW_FRONTEND_PORT}"
    networks:
      - app_network
    volumes:
      - shared_volume:/shared_volume  # Added shared volume


  interview_frontend:
    build: ./services/interview_ai/frontend
    container_name: InterviewFrontend
    ports:
      - "${INTERVIEW_FRONTEND_PORT}:3000"
    depends_on:
      - interview_backend
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: "http://localhost:8080/api/v1"
    networks:
      - app_network

  # Screening Microservice
  screening_api:
    build: ./services/screening/screener
    container_name: ScreeningAPI
    ports:
      - "${JOB_APPLICATION_PORT}:9000"
    env_file: .env
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGODB_URI: "mongodb://mongo:27017/hr_db"  # Using local MongoDB
      GEMINI_API_KEY: "${GEMINI_API_KEY}"  # Consider moving to .env
      UPLOAD_DIR: "/shared_volume"
      NOTIFICATION_SERVICE_URL: "http://notification:${NOTIFICATION_PORT}/api/v1/"
    volumes:
      - shared_volume:/shared_volume
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - app_network

  screening_consumer:
    build: ./services/screening/screener
    command: python rabbitMQ/consumer.py
    container_name: ScreeningConsumer
    env_file: .env
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGODB_URI: "mongodb://mongo:27017/hr_db"
      GEMINI_API_KEY: "${GEMINI_API_KEY}"
    volumes:
      - shared_volume:/shared_volume
    # restart: unless-stopped
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy

    networks:
      - app_network

  # Shared Infrastructure Services
  mongo:
    image: mongo:latest
    container_name: Mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
    environment:
      MONGO_INITDB_DATABASE: hr_db
    networks:
      - app_network
    logging:
      driver: "none"

  redis:
    image: redis:latest
    container_name: Redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  notification:
    build: ./services/notification
    ports:
      - "${NOTIFICATION_PORT}:8000"
    env_file: .env
    
    environment:
      PORT: 8000
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      REDIS_URI: "redis://redis:6379/0"
    networks:
      - app_network
    depends_on:
      - redis

  rabbitmq:
    image: rabbitmq:4.0-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s


  job_portal:
    build: ./services/screening/job-portal
    env_file: .env
    ports:
      - "${JOB_PORTAL_PORT}:3000"
    environment:
      BASE_API_URL: "http://screening_api:${JOB_APPLICATION_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - screening_api
    networks:
      - app_network
    restart: unless-stopped


networks:
  app_network:
    driver: bridge

volumes:
  shared_volume:
  rabbitmq_data: